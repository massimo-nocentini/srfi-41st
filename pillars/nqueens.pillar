!The Eight Queens puzzle

This problem asks for a placement of eight queens on a chessboard so that none of them attack any other, is an example of a problem that can be solved using the stream of successes technique. The algorithm is to place a queen in the first column of a chessboard; any column is satisfactory. Then a queen is placed in the second column, in any position not held in check by the queen in the first column. Then a queen is placed in the third column, in any position not held in check by the queens in the first two columns. And so on, until all eight queens have been placed. If at any point there is no legal placement for the next queen, backtrack to a different legal position for the previous queens, and try again.The chessboard is represented as a stream of length m, where there are queens in the first m columns, each position in the stream representing the rank on which the queen appears in that column. For example, stream 4 6 1 5 2 8 3 7 represents the following chessboard:!!ChessboardTwo queens at column i row j and column m row n check each other if their columns i and m are the same, or if their rows j and n are the same, or if they are on the same diagonal with i + j = m + n or i – j = m – n. There is no need to test the columns, because the placement algorithm enforces that they differ, so the check? procedure tests if two queens hold each other in check.(define (check? i j m n)  (or (= j n)      (= (+ i j) (+ m n))      (= (- i j) (- m n))))The algorithm walks through the columns, extending position p by adding a new queen in row n with (stream-append p (stream n)). Safe? tests if it is safe to do so, using the utility procedure stream-and.(define (stream-and strm)  (let loop ((strm strm))    (cond ((stream-null? strm) #t)          ((not (stream-car strm)) #f)          (else (loop (stream-cdr strm))))))(define (safe? p n)  (let* ((len (stream-length p))         (m (+ len 1)))    (stream-and      (stream-of        (not (check? (car ij) (cadr ij) m n))          (ij in (stream-zip                   (stream-range 1 m)                   p))))))Procedure (queens m) returns all the ways that queens can safely be placed in the first m columns.(define (queens m)  (if (zero? m)      (stream (stream))      (stream-of (stream-append p (stream n))        (p in (queens (- m 1)))        (n in (stream-range 1 9))        (safe? p n))))To see the first solution to the Eight Queens problem, say(stream->list (stream-car (queens 8)))To see all 92 solutions, say(stream->list  (stream-map stream->list    (queens 8)))There is no explicit backtracking in the code. The stream-of expression in queens returns all possible streams that satisfy safe?; implicit backtracking occurs in the recursive call to queens.